@page "/MusicPlayer"
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager nav
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>@Title</PageTitle>
@if(!Desktop){
    <MobileLayout></MobileLayout>
}
else
{
    <DesktopLayout></DesktopLayout>
}
<script>
    window.myFunctions = {
        setAudioSource: function(sourceUrl){
            var audioPlayer = document.getElementById('audioPlayer');
            if (audioPlayer) {
                audioPlayer.src = sourceUrl;
                audioPlayer.play();
            }
        },
        loopAudio: function(loop){
            var audioPlayer = document.getElementById('audioPlayer');
            if (audioPlayer) {
                audioPlayer.loop = loop;
            }
        },
        screenSize: function(){
            return window.innerWidth;
        },
        closeNav: function(){
            document.addEventListener('click', function (event) {
                var navbar = document.getElementById("navbarToggleLinks");
                var toggler = document.getElementById("navbarToggler");

                if (!navbar.contains(event.target) && !toggler.contains(event.target)) {
                    $(navbar).collapse('hide');
                }
            });
        }
    }
</script>

@code {
    public List<string> AudioSource { get; set; } = new();
    public string CurrentAudioSource { get; set; }
    public string CurrentSongName { get; set; }
    public string Title;
    public bool Loop = false;
    public string loopMsg = "Off";
    public bool Desktop;

    protected override void OnInitialized()
    {
        LoadAudioDirectory();
        nav.LocationChanged += uriChange;
    }

    private void uriChange(object sender, LocationChangedEventArgs e)
    {
        LoadAudioDirectory();
        StateHasChanged();
    }

    private void LoadAudioDirectory()
    {
        var uri = nav.ToAbsoluteUri(nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        var directory = query.FirstOrDefault().Key;
        Title = directory;

        if (!string.IsNullOrEmpty(directory))
        {
            LoadAudioFiles(directory);
        }
        else
        {
            Console.WriteLine($"Directory {directory} does not exist.");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Desktop = await JS.InvokeAsync<int>("myFunctions.screenSize") >= 770;
            StateHasChanged();
        }
        await JS.InvokeVoidAsync("myFunctions.closeNav");
    }

    public void LoadAudioFiles(string directory)
    {
        var basePath = Path.Combine("wwwroot", "Sounds", directory);
        if (Directory.Exists(basePath))
        {
            AudioSource = Directory.GetFiles(basePath, "*.mp3").Select(file => $"Sounds/{directory}/{Path.GetFileName(file)}").ToList();
        }
        else
        {
            Console.WriteLine($"Directory {basePath} does not exist.");
        }
    }

    public async Task PlayAudio(string filePath)
    {
        CurrentAudioSource = filePath;
        CurrentSongName = Path.GetFileNameWithoutExtension(filePath);
        await JS.InvokeVoidAsync("myFunctions.setAudioSource", filePath);
    }

    public async Task LoopAudio()
    {
        Loop = !Loop;
        loopMsg = Loop ? "On" : "Off";
        await JS.InvokeVoidAsync("myFunctions.loopAudio", Loop);
    }
}